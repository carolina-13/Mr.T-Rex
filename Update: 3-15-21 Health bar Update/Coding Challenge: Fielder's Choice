import pygame
import random
import os
import math

WIDTH = 639
HEIGHT = 619
FPS = 30
GROUND = HEIGHT - 30
SLOW = 3
FAST = 8

PLAYER_ACC = 0.9
PLAYER_FRICTION = -0.12
PLAYER_GRAV = 0.9
vec = pygame.math.Vector2

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)


game_folder = os.path.dirname(__file__)
img_folder = os.path.join(game_folder, "img")
snd_folder = os.path.join(game_folder, "snd")



def show_start_screen():

  # game splash/start screen
        screen.fill(BLACK)
        screen.blit(startscreen, startscreen_rect)
        pygame.display.flip()

        waiting = True
        while waiting:
            clock.tick(FPS)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.KEYUP:
                    waiting = False

def show_end_screen():
    screen.blit(endscreen, endscreen_rect)
    pygame.display.flip()

    waiting = True
    while waiting:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit() 
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_SPACE:
                    waiting = False
    return True


class HealthBar(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.healthbars = [
            pygame.image.load(os.path.join(img_folder, "health_bar0.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar1.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "health_bar2.png")).convert()
            ]
        self.healthbar_count = 0

        self.image = self.healthbars[self.healthbar_count]
        self.image = pygame.transform.scale(self.image, (100, 50))
        self.image.set_colorkey(BLACK)

        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = 10

    def getHealth(self):
        return self.healthbar_count

    def setHealth(self, health):
        if health == 1:
            self.healthbar_count -= 1
            if self.healthbar_count < 0:
                self.healthbar_count = 0
        elif health == -1:
            self.healthbar_count += 1
            if self.healthbar_count > 5:
                self.healthbar_count = 5

    def update(self):
        self.image = self.healthbars[self.healthbar_count]
        self.image = pygame.transform.scale(self.image, (100, 50))
        self.image.set_colorkey(BLACK)






class Bullet(pygame.sprite.Sprite):
    def __init__(self, start_x, start_y, dest_x, dest_y):
        pygame.sprite.Sprite.__init__(self)

        #BULLET IMG
        self.image = pygame.image.load(os.path.join(img_folder, "bullet.png")).convert()
        self.image.set_colorkey(BLACK)

        #ESTABLISH RECT, STARTING POSITION
        self.rect = self.image.get_rect()
        self.rect.left = start_x
        self.rect.bottom = start_y

        #MAKE STARTING POINT MORE ACCURATE
        self.floating_point_x = start_x
        self.floating_point_y = start_y

        #DIFFERENCE BTW START AND DEST PTS
        x_diff = dest_x - start_x
        y_diff = dest_y - start_y
        angle = math.atan2(y_diff, x_diff)

        #APPLY VELOCITY
        self.speedx = 20
        self.change_x = math.cos(angle) * self.speedx
        self.change_y = math.sin(angle) * self.speedx


    def update(self):

        # The floating point x and y hold our more accurate location.
        self.floating_point_y += self.change_y
        self.floating_point_x += self.change_x

        # The rect.x and rect.y are converted to integers.
        self.rect.y = int(self.floating_point_y)
        self.rect.x = int(self.floating_point_x)

        #DELETE LASER ONCE OFF SCREEN
        # If the bullet flies of the screen, get rid of it.
        if self.rect.x < 0 or self.rect.x > WIDTH or self.rect.y < 0 or self.rect.y > HEIGHT:
            self.kill()


class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "rex.png")).convert()
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = 20

        self.rect.centerx = WIDTH / 2
        self.rect.bottom = HEIGHT - 10
        self.speex = 0
        self.shield = 100
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()

        self.pos = vec(10, GROUND - 60)
        self.vel = vec(0, 0)
        self.acc = vec(0, 0)




    def update(self):
        self.speedx = 0


        keystate = pygame.key.get_pressed()

        self.rect.x += self.speedx

        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0

        self.acc = vec(0, PLAYER_GRAV)

        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_d]:
            self.acc.x += PLAYER_ACC
        if keystate[pygame.K_a]:
            self.acc.x += -PLAYER_ACC
        if keystate[pygame.K_w]:
            self.rect.y += -5
        if keystate[pygame.K_d]:
            self.rect.y += 5
        if self.vel.y == 0 and keystate[pygame.K_SPACE]:
            self.vel.y = -20



        self.acc.x += self.vel.x * PLAYER_FRICTION


        self.vel += self.acc
        self.pos += self.vel + 0.5 * self.acc


        if self.pos.x > WIDTH:
            self.pos.x = 0
        if self.pos.x < 0:
            self.pos.x = WIDTH

        if self.pos.y > GROUND:
            self.pos.y = GROUND + 1
            self.vel.y = 0

        self.rect.midbottom = self.pos

        mouseState = pygame.mouse.get_pressed()
        if mouseState[0] == 1:
                pos = pygame.mouse.get_pos()
                mouse_x = pos[0]
                mouse_y = pos[1]

                self.shoot(mouse_x, mouse_y)


    def shoot (self, mouse_x, mouse_y):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now

            bullet = Bullet(self.rect.right,
                            self.rect.centery,
                            mouse_x,
                            mouse_y)

            all_sprites.add(bullet)
            bullets.add(bullet)



class Mob(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "badt.png")).convert()
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centery = y
        self.rect.left = x
        self.shoot_delay = 650
        self.last_shot = pygame.time.get_ticks()

    def shoot (self):
      now = pygame.time.get_ticks()
      if now - self.last_shot > self.shoot_delay:
          self.last_shot = now
          bullet = Bullet(self.rect.left,
                          self.rect.centery,
                          0,
                          self.rect.y)

          all_sprites.add(bullet)
          Bullet.add(bullet)

    def update(self):
        self.rect.x += -5
        if self.rect.right < 0:
            self.rect.left = WIDTH
        self.shoot()






pygame.init()
pygame.mixer.init()

shoot_sound = pygame.mixer.Sound(os.path.join(snd_folder, "laser3.wav"))
pygame.mixer.music.load(os.path.join(snd_folder, "music.mp3"))
pygame.mixer.music.set_volume(0.4)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Mr.T-rex")

clock = pygame.time.Clock()
pygame.mixer.music.play(loops = -1)

#start screen
title_image = pygame.image.load(os.path.join(img_folder, "title.png")).convert()
startscreen = pygame.transform.scale(title_image, (WIDTH, HEIGHT))
startscreen_rect = startscreen.get_rect()

#End screen
death_image = pygame.image.load(os.path.join(img_folder, "end.png")).convert()
endscreen = pygame.transform.scale(death_image, (WIDTH, HEIGHT))
endscreen_rect = endscreen.get_rect()

#Background
background_image = pygame.image.load(os.path.join(img_folder, "background.jpg")).convert()
background = pygame.transform.scale(background_image, (WIDTH, HEIGHT))
background_rect = background.get_rect()



all_sprites = pygame.sprite.Group()
mobs = pygame.sprite.Group()
bullets = pygame.sprite.Group()

player = Player()
all_sprites.add(player)

healthBar = HealthBar()
all_sprites.add(healthBar)

def newMob():
    mob = Mob(WIDTH -60 ,HEIGHT -60)
    all_sprites.add(mob)

    mobs.add(mob)


#GAME LOOP
start = True
end = False
running = True
while running:

    if start:
        show_start_screen()
        start = False
        newMob()

    if end:
        start = show_end_screen()
        end = False

    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False



            #Update
    all_sprites.update()

    #Check for hits
    hits = pygame.sprite.groupcollide(mobs, bullets, False, True)
    for hit in hits:
        all_sprites.add(mobs)
        healthBar.setHealth(-1)
        mobs.add(mobs)

    hits = pygame.sprite.spritecollide(player, mobs, True)
    if hits:
        #running = False
        healthBar.setHealth(-1)
        end = True


    screen.blit(startscreen, startscreen_rect)
    screen.blit(endscreen, endscreen_rect)
    screen.blit(background, background_rect)
    all_sprites.draw(screen)

    pygame.display.flip()

pygame.quit()
